<div>
  <div>
    <h1>What can we help with?</h1>
  </div>

  <div id="category-list">
    <div class="category-card" data-category="admin">Admin</div>
    <div class="category-card" data-category="test_results">Test Results</div>
    <div class="category-card" data-category="muscles_and_joints">Muscles and Joints</div>
    <div class="category-card" data-category="contraception">Contraception</div>
    <div class="category-card" data-category="breathing_conditions_and_allergies">Breathing conditions & Allergies</div>
    <div class="category-card" data-category="mental_health">Mental health</div>
    <div class="category-card" data-category="prescriptions">Prescriptions</div>
    <div class="category-card" data-category="diabetes_care">Diabetes Care</div>
    <div class="category-card" data-category="cold_cough_flu_sore_throat_and_earaches">Cold, cough, flu, sore throat & Earaches</div>
    <div class="category-card" data-category="skin_issues">Skin issues</div>
    <div class="category-card" data-category="stomach_problems">Stomach problems</div>
    <div class="category-card" data-category="urine_problems">Urine problems</div>
    <div class="category-card" data-category="travel_health">Travel health</div>
    <div class="category-card" data-category="other">Other</div>
  </div>

  <div id="triage-questions" style="display: none;">
    <h2 id="triage-title"></h2>
    <div id="questions-container"></div>
    <button id="submit-triage">Submit Triage</button>
  </div>

  <div id="reason-for-appointment" style="display: none;">
    <h1>Why would you like an appointment?</h1>
    <h3>Tell us about your symptoms, condition, or reason for booking (200 characters)</h3>
    <textarea id="appointment-reason" maxlength="200" rows="4" cols="50"></textarea>
    <button id="submit-reason">Submit</button>
  </div>

  <div>
    <h1>Choose your appointment type</h1>
  </div>

  <div id="appointment-type-list" style="display: none;">
    <div class="appointment-type-card" data-appointment-type="phone">Phone</div>
    <div class="appointment-type-card" data-appointment-type="video">Video Call</div>
    <div class="appointment-type-card" data-appointment-type="in-person">In-person</div>
  </div>

  <div id="available-clinicians" style="display: none;">
    <h2>Available Clinicians</h2>
    <div id="clinicians-container">
      <!-- Clinician cards will be inserted here -->
    </div>
  </div>

  <div id="calendar-view" style="display: none;">
    <h2>Select Date and Time</h2>
    <div id="calendar-container">
      <!-- Calendar will be inserted here -->
    </div>
    <div id="available-times" style="display: flex; justify-content: space-around; margin-top: 20px;">
      <!-- Available times will be shown here -->
    </div>
    <button id="close-calendar">Close</button>
  </div>

  <%= link_to 'Back', appointments_path %>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const categoryList = document.getElementById('category-list');
    const triageQuestions = document.getElementById('triage-questions');
    const triageTitle = document.getElementById('triage-title');
    const questionsContainer = document.getElementById('questions-container');
    const reasonForAppointment = document.getElementById('reason-for-appointment');
    const appointmentTypeList = document.getElementById('appointment-type-list');
    const availableClinicians = document.getElementById('available-clinicians');
    const cliniciansContainer = document.getElementById('clinicians-container');
    const calendarView = document.getElementById('calendar-view');
    const calendarContainer = document.getElementById('calendar-container');
    const availableTimes = document.getElementById('available-times');
    const closeCalendarButton = document.getElementById('close-calendar');
    const submitTriageButton = document.getElementById('submit-triage');

    const triageData = {
      'admin': ['Question 1 for Admin?', 'Question 2 for Admin?', 'Question 3 for Admin?', 'Question 4 for Admin?'],
      'test_results': ['Question 1 for Test Results?', 'Question 2 for Test Results?', 'Question 3 for Test Results?', 'Question 4 for Test Results?'],
      'muscles_and_joints': ['Question 1 for Muscles and Joints?', 'Question 2 for Muscles and Joints?', 'Question 3 for Muscles and Joints?', 'Question 4 for Muscles and Joints?'],
      'contraception': ['Question 1 for Contraception?', 'Question 2 for Contraception?', 'Question 3 for Contraception?', 'Question 4 for Contraception?'],
      'breathing_conditions_and_allergies': ['Question 1 for Breathing conditions & Allergies?', 'Question 2 for Breathing conditions & Allergies?', 'Question 3 for Breathing conditions & Allergies?', 'Question 4 for Breathing conditions & Allergies?'],
      'mental_health': ['Question 1 for Mental health?', 'Question 2 for Mental health?', 'Question 3 for Mental health?', 'Question 4 for Mental health?'],
      'prescriptions': ['Question 1 for Prescriptions?', 'Question 2 for Prescriptions?', 'Question 3 for Prescriptions?', 'Question 4 for Prescriptions?'],
      'diabetes_care': ['Question 1 for Diabetes Care?', 'Question 2 for Diabetes Care?', 'Question 3 for Diabetes Care?', 'Question 4 for Diabetes Care?'],
      'cold_cough_flu_sore_throat_and_earaches': ['Question 1 for Cold, cough, flu, sore throat & Earaches?', 'Question 2 for Cold, cough, flu, sore throat & Earaches?', 'Question 3 for Cold, cough, flu, sore throat & Earaches?', 'Question 4 for Cold, cough, flu, sore throat & Earaches?'],
      'skin_issues': ['Question 1 for Skin issues?', 'Question 2 for Skin issues?', 'Question 3 for Skin issues?', 'Question 4 for Skin issues?'],
      'stomach_problems': ['Question 1 for Stomach problems?', 'Question 2 for Stomach problems?', 'Question 3 for Stomach problems?', 'Question 4 for Stomach problems?'],
      'urine_problems': ['Question 1 for Urine problems?', 'Question 2 for Urine problems?', 'Question 3 for Urine problems?', 'Question 4 for Urine problems?'],
      'travel_health': ['Question 1 for Travel health?', 'Question 2 for Travel health?', 'Question 3 for Travel health?', 'Question 4 for Travel health?'],
      'other': ['Question 1 for Other?', 'Question 2 for Other?', 'Question 3 for Other?', 'Question 4 for Other?']
    };

    const cliniciansData = {
      'phone': [
        { name: 'Clinician 1', times: ['8:00am', '10:00am', '1:00pm'] },
        { name: 'Clinician 2', times: ['9:00am', '11:00am', '2:00pm'] },
      ],
      'video': [
        { name: 'Clinician 3', times: ['8:30am', '10:30am', '1:30pm'] },
        { name: 'Clinician 4', times: ['9:30am', '11:30am', '2:30pm'] },
      ],
      'in-person': [
        { name: 'Clinician 5', times: ['8:45am', '10:45am', '1:45pm'] },
        { name: 'Clinician 6', times: ['9:45am', '11:45am', '2:45pm'] },
      ],
    };

    categoryList.addEventListener('click', function(event) {
      if (event.target && event.target.matches('.category-card')) {
        const category = event.target.getAttribute('data-category');
        const questions = triageData[category];

        triageTitle.textContent = event.target.textContent;
        questionsContainer.innerHTML = '';

        questions.forEach((question, index) => {
          const questionElement = document.createElement('div');
          questionElement.className = 'question';
          questionElement.textContent = question;

          const buttonsContainer = document.createElement('div');
          buttonsContainer.className = 'question-buttons';

          const yesButton = document.createElement('button');
          yesButton.textContent = 'Yes';
          yesButton.setAttribute('data-answer', 'yes');

          const noButton = document.createElement('button');
          noButton.textContent = 'No';
          noButton.setAttribute('data-answer', 'no');

          yesButton.addEventListener('click', () => {
            questionElement.setAttribute('data-answered', 'true');
            yesButton.disabled = true;
            noButton.disabled = true;
          });

          noButton.addEventListener('click', () => {
            questionElement.setAttribute('data-answered', 'true');
            yesButton.disabled = true;
            noButton.disabled = true;
          });

          buttonsContainer.appendChild(yesButton);
          buttonsContainer.appendChild(noButton);

          questionElement.appendChild(buttonsContainer);
          questionsContainer.appendChild(questionElement);
        });

        categoryList.style.display = 'none';
        triageQuestions.style.display = 'block';
      }
    });

    submitTriageButton.addEventListener('click', function() {
      const allAnswered = [...questionsContainer.querySelectorAll('.question')].every(question => question.getAttribute('data-answered') === 'true');

      if (allAnswered) {
        triageQuestions.style.display = 'none';
        reasonForAppointment.style.display = 'block';
      } else {
        alert('Please answer all triage questions before proceeding.');
      }
    });

    document.getElementById('submit-reason').addEventListener('click', function() {
      const appointmentReason = document.getElementById('appointment-reason').value.trim();
      if (appointmentReason) {
        reasonForAppointment.style.display = 'none';
        appointmentTypeList.style.display = 'block';
      } else {
        alert('Please provide a reason for your appointment.');
      }
    });

    appointmentTypeList.addEventListener('click', function(event) {
      if (event.target && event.target.matches('.appointment-type-card')) {
        const appointmentType = event.target.getAttribute('data-appointment-type');
        const clinicians = cliniciansData[appointmentType];

        cliniciansContainer.innerHTML = '';

        clinicians.forEach(clinician => {
          const clinicianCard = document.createElement('div');
          clinicianCard.className = 'clinician-card';

          const clinicianName = document.createElement('div');
          clinicianName.textContent = clinician.name;
          clinicianCard.appendChild(clinicianName);

          const times = document.createElement('div');
          times.className = 'times';
          clinician.times.forEach(time => {
            const timeSlot = document.createElement('div');
            timeSlot.textContent = time;
            times.appendChild(timeSlot);
          });

          const moreButton = document.createElement('div');
          moreButton.textContent = 'More';
          moreButton.className = 'more-button';
          moreButton.addEventListener('click', () => {
            showCalendarView(clinician.name);
          });
          times.appendChild(moreButton);

          clinicianCard.appendChild(times);
          cliniciansContainer.appendChild(clinicianCard);
        });

        appointmentTypeList.style.display = 'none';
        availableClinicians.style.display = 'block';
      }
    });

    function showCalendarView(clinicianName) {
      // Assuming we use a date picker library like flatpickr for the calendar
      flatpickr(calendarContainer, {
        onChange: function(selectedDates, dateStr, instance) {
          // This would be replaced with the actual data fetch
          const availableTimesData = getAvailableTimesForClinicianOnDate(clinicianName, dateStr);
          displayAvailableTimes(availableTimesData);
        }
      });

      availableClinicians.style.display = 'none';
      calendarView.style.display = 'block';
    }

    function displayAvailableTimes(times) {
      availableTimes.innerHTML = '';
      times.forEach(time => {
        const timeSlot = document.createElement('div');
        timeSlot.textContent = time;
        availableTimes.appendChild(timeSlot);
      });
    }

    function getAvailableTimesForClinicianOnDate(clinicianName, dateStr) {
      // Mock data, replace with actual fetch from server
      return ['8:00am', '10:00am', '1:00pm', '3:00pm'];
    }

    closeCalendarButton.addEventListener('click', function() {
      calendarView.style.display = 'none';
      availableClinicians.style.display = 'block';
    });
  });
</script>
